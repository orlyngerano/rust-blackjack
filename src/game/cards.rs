#[derive(Copy, Clone)]
pub enum Card {
    ClubsAce = 0x01,
    ClubsTwo = 0x02,
    ClubsThree = 0x03,
    ClubsFour = 0x04,
    ClubsFive = 0x05,
    ClubsSix = 0x06,
    ClubsSeven = 0x07,
    ClubsEight = 0x08,
    ClubsNine = 0x09,
    ClubsTen = 0x0A,
    ClubsJack = 0x0B,
    ClubsQueen = 0x0C,
    ClubsKing = 0x0D,
    DiamondsAce = 0x11,
    DiamondsTwo = 0x12,
    DiamondsThree = 0x13,
    DiamondsFour = 0x14,
    DiamondsFive = 0x15,
    DiamondsSix = 0x16,
    DiamondsSeven = 0x17,
    DiamondsEight = 0x18,
    DiamondsNine = 0x19,
    DiamondsTen = 0x1A,
    DiamondsJack = 0x1B,
    DiamondsQueen = 0x1C,
    DiamondsKing = 0x1D,
    HeartsAce = 0x21,
    HeartsTwo = 0x22,
    HeartsThree = 0x23,
    HeartsFour = 0x24,
    HeartsFive = 0x25,
    HeartsSix = 0x26,
    HeartsSeven = 0x27,
    HeartsEight = 0x28,
    HeartsNine = 0x29,
    HeartsTen = 0x2A,
    HeartsJack = 0x2B,
    HeartsQueen = 0x2C,
    HeartsKing = 0x2D,
    SpadesAce = 0x31,
    SpadesTwo = 0x32,
    SpadesThree = 0x33,
    SpadesFour = 0x34,
    SpadesFive = 0x35,
    SpadesSix = 0x36,
    SpadesSeven = 0x37,
    SpadesEight = 0x38,
    SpadesNine = 0x39,
    SpadesTen = 0x3A,
    SpadesJack = 0x3B,
    SpadesQueen = 0x3C,
    SpadesKing = 0x3D,
}

pub fn get_card_name(card: &Card) -> String {
    match card {
        Card::ClubsAce => String::from("ace of Clubs"),
        Card::ClubsTwo => String::from("two of Clubs"),
        Card::ClubsThree => String::from("three of Clubs"),
        Card::ClubsFour => String::from("four of Clubs"),
        Card::ClubsFive => String::from("five of Clubs"),
        Card::ClubsSix => String::from("six of Clubs"),
        Card::ClubsSeven => String::from("seven of Clubs"),
        Card::ClubsEight => String::from("eight of Clubs"),
        Card::ClubsNine => String::from("nine of Clubs"),
        Card::ClubsTen => String::from("ten of Clubs"),
        Card::ClubsJack => String::from("jack of Clubs"),
        Card::ClubsQueen => String::from("queen of Clubs"),
        Card::ClubsKing => String::from("king of Clubs"),
        Card::DiamondsAce => String::from("ace of Diamonds"),
        Card::DiamondsTwo => String::from("two of Diamonds"),
        Card::DiamondsThree => String::from("three of Diamonds"),
        Card::DiamondsFour => String::from("four of Diamonds"),
        Card::DiamondsFive => String::from("five of Diamonds"),
        Card::DiamondsSix => String::from("six of Diamonds"),
        Card::DiamondsSeven => String::from("seven of Diamonds"),
        Card::DiamondsEight => String::from("eight of Diamonds"),
        Card::DiamondsNine => String::from("nine of Diamonds"),
        Card::DiamondsTen => String::from("ten of Diamonds"),
        Card::DiamondsJack => String::from("jack of Diamonds"),
        Card::DiamondsQueen => String::from("queen of Diamonds"),
        Card::DiamondsKing => String::from("king of Diamonds"),
        Card::HeartsAce => String::from("ace of Hearts"),
        Card::HeartsTwo => String::from("two of Hearts"),
        Card::HeartsThree => String::from("three of Hearts"),
        Card::HeartsFour => String::from("four of Hearts"),
        Card::HeartsFive => String::from("five of Hearts"),
        Card::HeartsSix => String::from("six of Hearts"),
        Card::HeartsSeven => String::from("seven of Hearts"),
        Card::HeartsEight => String::from("eight of Hearts"),
        Card::HeartsNine => String::from("nine of Hearts"),
        Card::HeartsTen => String::from("ten of Hearts"),
        Card::HeartsJack => String::from("jack of Hearts"),
        Card::HeartsQueen => String::from("queen of Hearts"),
        Card::HeartsKing => String::from("king of Hearts"),
        Card::SpadesAce => String::from("ace of Spades"),
        Card::SpadesTwo => String::from("two of Spades"),
        Card::SpadesThree => String::from("three of Spades"),
        Card::SpadesFour => String::from("four of Spades"),
        Card::SpadesFive => String::from("five of Spades"),
        Card::SpadesSix => String::from("six of Spades"),
        Card::SpadesSeven => String::from("seven of Spades"),
        Card::SpadesEight => String::from("eight of Spades"),
        Card::SpadesNine => String::from("nine of Spades"),
        Card::SpadesTen => String::from("ten of Spades"),
        Card::SpadesJack => String::from("jack of Spades"),
        Card::SpadesQueen => String::from("queen of Spades"),
        Card::SpadesKing => String::from("king of Spades"),
    }
}

pub fn get_card_value(card: &Card) -> u8 {
    let unmask_card: u8 = 0x0f & *card as u8;

    if unmask_card > 10 {
        10
    } else {
        unmask_card
    }
}
